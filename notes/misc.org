* Tensorflow
** Deployment
*** TF service
    models.conf file:
    #+BEGIN_SRC json
      model_config_list: {

          config: {
              name: "model1",
              base_path: "/tmp/model",
              model_platform: "tensorflow"
          },
          config: {
              name: "model2",
              base_path: "/tmp/model2",
              model_platform: "tensorflow"
          }
      }
    #+END_SRC

    start tf service using models.conf:
    #+BEGIN_SRC bash
      tensorflow_model_server --port=9000 --model_config_file=/serving/models.conf
    #+END_SRC

    - [[https://stackoverflow.com/questions/45749024/how-can-i-use-tensorflow-serving-for-multiple-models][How can I use tensorflow serving for multiple models - Stack Overflow]]

* Docker
** [[https://blog.csdn.net/qq_37674858/article/details/81669082][docker.service]]
   Change docker storage path and base size.
   #+begin_src bash
     systemctl disable docker
     systemctl enable docker
     # Add ExecStart=/usr/bin/dockerd --graph /home/docker --storage-opt dm.basesize=40G
     vim /usr/lib/systemd/system/docker.service
     systemctl daemon-reload
     systemctl start docker
     docker info
   #+end_src
** docker root permission
   #+begin_src bash
     sudo groupadd docker     #添加docker用户组
     sudo gpasswd -a $USER docker     #将登陆用户加入到docker用户组中
     newgrp docker     #更新用户组
     docker ps    #测试docker命令是否可以使用sudo正常使用
   #+end_src

** copy
*** docker cp
    #+BEGIN_SRC bash
      # host -> container
      docker cp /host/path/target <container_id>:/file/path/within/container
      # container -> host
      docker cp <containerId>:/file/path/within/container /host/path/target
    #+END_SRC
*** COPY
    - COPY when building:
    #+begin_src bash
      COPY . /file/path/within/image
      # NOT this way
      COPY * /file/path/within/image
    #+end_src

    - Ignore certain files using =.dockerignore=
    #+begin_src text
      .git*
      .dockerignore
      Dockerfile
    #+end_src

    - Reference
      1. [[https://github.com/moby/moby/issues/15858][Dockerfile COPY with file globs will copy files from subdirectories to the destination directory]]
* Linux
** Bash
*** if-fi/test
    - test :: try to run these lines in bash.
    #+begin_src bash
      $(test "$LINGVO_DEVICE" = "gpu" && echo "--runtime=nvidia")
      test "$LINGVO_DEVICE" = "gpu" && echo "--runtime=nvidia"
    #+end_src

    - =-f= file existance
    #+begin_src bash
      FILE=/etc/resolv.conf
      if test -f "$FILE"; then
          echo "$FILE exist"
      fi
      # or use =&&= and =||=
      test -f /etc/resolv.conf && echo "$FILE exist"
      [ -f /etc/resolv.conf ] && echo "$FILE exist" || echo "$FILE does not exist"
    #+end_src

    - =-x= executable
    #+begin_src bash
      if [ ! -x "$folder"]; then
          mkdir "$folder"
      fi
    #+end_src

    - =-d= directory existence
    #+begin_src bash
      if [ ! -d "$folder"]; then
          mkdir "$folder"
      fi
    #+end_src

    - Reference
      - [[https://stackoverflow.com/questions/18119689/command-not-found-in-bashs-if-else-condition-when-using-d-dir][Add space between square brackets]]
      - [[https://linuxize.com/post/bash-check-le-exists/][How to Check if a File or Directory Exists in Bash]]


*** cd & test param
    #+begin_src bash
      dt=$1
      df -h
      nvidia-smi
      cd `dirname $0`
      pip install ..
      if test -z "$dt"
      then
          python merge.py
      else
          python merge.py --dt $dt
      fi
    #+end_src
*** cp
    - cp =-L= :: copy follow symbolic link
    #+begin_src bash
      cp -r -L source dest
    #+end_src

    - Reference
      - [[https://superuser.com/questions/216919/how-to-copy-symlinks-to-target-as-normal-folders][How to copy symlinks to target as normal folders]]

*** for do done
    - easy way
    #+begin_src bash
      for i in hello world 'hello world'
      do
          echo $i
      done
    #+end_src

    - advanced
    #+begin_src bash
      strings=(
          string1
          string2
          "string with spaces"
          stringN
      )
      for i in "${strings[@]}"; do
          echo "$i"
      done
    #+end_src

*** args with default values
    - You can set a default value for a variable like so:
    #+begin_src bash
      ARG1=${1:-foo}
      ARG2=${2:-bar}
      ARG3=${3:-1}
      ARG4=${4:-$(date)}
      echo "$ARG1"
      echo "$ARG2"
      echo "$ARG3"
      echo "$ARG4"
    #+end_src
    - Reference
      - [[https://stackoverflow.com/questions/9332802/how-to-write-a-bash-script-that-takes-optional-input-arguments][How to write a bash script that takes optional input arguments? - Stack Overflow]]
*** apt install vim
    #+BEGIN_SRC bash
      apt-get update
      apt-get install apt-file
      apt-file update
      apt-get install vim
    #+END_SRC


*** get current script path
    #+begin_src bash
      cd `dirname $0`
      pip install ..
      python main.py --dt=2019-08-27 --mode hive --batch_size 512
    #+end_src

* Python
** syntax
*** [[http://www.runoob.com/python/python-func-type.html][type]]
    #+begin_src python
      # generated on the fly
      # torch/autograd/function.py
      backward_fn = type(name + 'Backward', (BackwardCFunction,), {'_forward_cls': cls})
      cls._backward_cls = backward_fn
    #+end_src
*** [[https://medium.com/@s16h/the-forgotten-optional-else-in-python-loops-90d9c465c830][forelse]]
    #+begin_src python
      def primes_python(nb_primes):
          p = []
          n = 2
          while len(p) < nb_primes:
              # Is n prime?
              for i in p:
                  if n % i == 0:
                      break

              # If no break occurred in the loop
              else:
                  p.append(n)
                  n += 1
          return p
    #+end_src

** package

*** numpy

**** [[https://docs.scipy.org/doc/numpy/reference/generated/numpy.apply_along_axis.html][numpy.apply_along_axis]]
     #+begin_src python
       density_count = np.apply_along_axis(
           lambda x: counts_p[int(x)], 1, labels.reshape(-1, 1))
     #+end_src
*** [[https://github.com/requests/toolbelt][requests-toolbelt]]
    - Install
    #+begin_src bash
      conda install requests-toolbelt
      # or
      pip install requests-toolbelt
    #+end_src

    - Quick use
    #+begin_src python
      from requests_toolbelt import MultipartEncoder
      import requests

        m = MultipartEncoder(
            fields={'field0': 'value', 'field1': 'value',
                  'field2': ('filename', open('file.py', 'rb'), 'text/plain')}
        )

        r = requests.post('http://httpbin.org/post', data=m,
                      headers={'Content-Type': m.content_type})
    #+end_src
*** json
    - [[https://codeyarns.com/2017/02/22/python-json-dump-misses-last-newline/][dump with new lines]]
    #+begin_src python
      json.dump(json_data, open("foobar.json", "w"), indent=4)
    #+end_src
    stud



    keycode 66 = Mode_switch
    keysym h = h H Left
    keysym l = l L Right
    keysym k = k K Up
    keysym j = j J Down
    keysym u = u U Prior
    keysym i = i I Home
    keysym o = o O End
    keysym p = p P Next
    https://unix.stackexchange.com/questions/414926/bind-capshjkl-to-arrow-keys-caps-to-esc



    https://superuser.com/questions/463312/how-to-configure-ctrlh-as-backspace-under-google-chrome


    If you want to modify the bindings, the Emacs binding can be found in /usr/share/themes/Emacs/gtk-3.0/gtk-keys.css, which can be copied over to ~/.config/gtk-3.0/gtk.css and modified.
    On GTK3, the ~/.gtkrc-2.0 method no longer works. Instead, edit the ~/.config/gtk-3.0/settings.ini and add the following line to the end:
    gtk-key-theme-name=Emacs

*** YAML
**** list anchor

     #+begin_src yaml
         pos_category: &pos_category
           in_set: *pos_category
     #+end_src
*** pandas
**** str
     #+begin_src python
       df = pd.read_csv(filein, sep='\t')\
              .drop_duplicates(subset='img_url', keep='last')
       df = df[df.img_url.str.endswith('.jpg')]
       # and also
       df = df[df.img_url.str.contains('.jpg')]
     #+end_src

*** pickle
    #+begin_src python
      with open(fileout, 'wb') as fout:
          pickle.dump(result, fout)
    #+end_src
*** glob
    Sort files by date
    #+begin_src python
      import glob
      import os
      files = glob.glob("*.txt")
      files.sort(key=os.path.getmtime)
      print("\n".join(files))
    #+end_src
*** os
**** os.path.getctime
    #+begin_src python
      # Python program to explain os.path.getmtime() method

      # importing os and time module
      import os
      import time

      # Path
      path = '/home/User/Documents/file.txt'

      # Get the time of last
      # modifation of the specified
      # path since the epoch
      modification_time = os.path.getmtime(path)
      print("Last modification time since the epoch:", access_time)

      # convert the time in
      # seconds since epoch
      # to local time
      local_time = time.ctime(modification_time)
      print("Last modification time(Local time):", local_time)
    #+end_src

*** pytorch
**** [[https://discuss.pytorch.org/t/undefined-symbol-when-import-lltm-cpp-extension/32627/3][c++11 support]]
    #+begin_src python
      torch._C._GLIBCXX_USE_CXX11_ABI
    #+end_src
**** [[https://zhuanlan.zhihu.com/p/67806320][pytorch c++ extension]]

    - c++
    #+begin_src c++
      #include <torch/extension.h>
      #include <vector>

      torch::Tensor test_forward_cpu(const torch::Tensor& inputA,
                                     const torch::Tensor& inputB);
      std::vector<torch::Tensor> test_backward_cpu(const torch::Tensor& grad_output);

      torch::Tensor test_forward_cpu(const torch::Tensor& x,
                                     const torch::Tensor& y){
        AT_ASSERTM(x.sizes()==y.sizes(), "x must be the same size with y.");
        torch::Tensor z = torch::zeros(x.sizes());
        z = 2*x +y;
        return z;
      }

      std::vector<torch::Tensor> test_backward_cpu(const torch::Tensor& grad_output){
        torch::Tensor grad_x = 2* torch::ones(grad_output.sizes());
        torch::Tensor  grad_y = torch::ones(grad_output.sizes());
        return {grad_x, grad_y};
      }

      PYBIND11_MODULE(TORCH_EXTENSION_NAME,m){
        m.def("forward", &test_forward_cpu,"This is a forward test.");
        m.def("backward", &test_backward_cpu, "That is a backward test.");
      }
    #+end_src

    - setup
    #+begin_src python
      from setuptools import setup
      from torch.utils.cpp_extension import BuildExtension, CppExtension

      setup(name='test_cpp',
            ext_modules=[CppExtension(name='test_cpp',
                                      sources=['src/test.cpp']),
                         ],
            cmdclass={'build_ext': BuildExtension}
            )
    #+end_src

    - python 封装
    #+begin_src python
      import torch
      import test_cpp
      class TestFunction(torch.autograd.Function):
          @staticmethod
          def forward(ctx, x, y):
              return test_cpp.forward(x, y)

          @staticmethod
          def backward(ctx, grad_output):
              grad_x, grad_y = test_cpp.backward(grad_output)
              return grad_x, grad_y


      class Test(torch.nn.Module):
          def __init__(self):
              super().__init__()

          def forward(self, x, y):
              return TestFunction.apply(x, y)
    #+end_src

    - python demo
    #+begin_src python
      from test import Test
      from loguru import logger
      import torch

      test = Test()
      x = torch.autograd.Variable(torch.Tensor([1, 2, 3]), requires_grad=True)
      y = torch.autograd.Variable(torch.Tensor([4, 5, 6]), requires_grad=True)
      z = test(x, y).double()
      z.sum().backward()
      logger.info(x)
      logger.info(y)
      logger.info(z)
      logger.info(x.grad)
      logger.info(y.grad)
    #+end_src

*** [[https://github.com/joblib/joblib/issues/317][joblib]]
    #+begin_src python
      from joblib import Parallel, delayed
      # direct
      Parallel(n_jobs=16)(delayed(_filter)(image_dir, image_name, self.log)
                                  for image_name in tqdm(os.listdir(image_dir)))
      # use chunk
      chunk_num = self.n_jobs * 2
      chunk_size = int(np.ceil(df.shape[0] / chunk_num))
      chunks = [df.iloc[i:i+chunk_size] for i in range(chunk_num)]
      self.log(
          f'Splited into {chunk_num} parts, running {self.n_jobs} workers...')
      rtns = Parallel(n_jobs=self.n_jobs, verbose=10)(delayed(__op)(chunk, self.ops, self.Image)
                                                      for chunk in tqdm(chunks))
    #+end_src
* Vim tips
  delete all lines that are empty or that contain only whitespace chracters(spaces, tabs)
  #+begin_src  bash
    :g/^\s*$/d
    :v/\S/d
  #+end_src

* Linux tool
  [[https://centos.pkgs.org/7/epel-x86_64/aria2-1.34.0-5.el7.x86_64.rpm.html][aria2 rpm]]

* Gcc-7.3 g++-7.3
  #+begin_src bash
    conda install gcc_linux-64
    conda install gxx_linux-64
  #+end_src

* Install neovim & SpaceVim
  #+begin_src bash
    # https://github.com/neovim/neovim/wiki/Installing-Neovim
    yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    yum install -y neovim python{2,3}-neovim
    curl -sLf https://spacevim.org/install.sh | bash
    # [[layers]]
    #   name = "lang#python"
  #+end_src

* Multi-class precsion & recall
  #+begin_src python
    from sklearn.metrics import confusion_matrix
    import numpy as np

    labels = ...
    predictions = ...

    cm = confusion_matrix(labels, predictions)
    recall = np.diag(cm) / np.sum(cm, axis = 1)
    precision = np.diag(cm) / np.sum(cm, axis = 0)
  #+end_src
* Git

** [[https://stackoverflow.com/questions/10904339/github-fatal-remote-origin-already-exists][remote origin exists]]
  #+begin_src bash
    git remote rm origin
    git remote add origin git@github.com:username/myapp.git
  #+end_src

* Emacs

** refactor
*** short-keys
    1. In iedit mode:
       - ~F~ to restrict to current function
       - ~V~ to focus selected
       - ~L~ to keep only current line, ~J~ to select below, ~K~ to select above
       - ~Tab~ to toggle on/off selected element


** evil
*** short-keys
    1. use ~b~ ~B~ ~e~ ~E~ to navigate
    2. ~vae~ visual an element
    3. ~var~ visual an subtree
    4. ~=ae~ auto-indent (or ~vae~ then ~=~)
    5. ~vii~ visual an indent

** org-mode

*** short-keys
    1. ~C-c C-x b~  org tree to indirect buffer

*** org table
    1. ~#+tblfm: $1=@#-2~ to add line number
*  LaTeX
**  texdoc
   #+begin_src bash
     texdoc babe
   #+end_src
